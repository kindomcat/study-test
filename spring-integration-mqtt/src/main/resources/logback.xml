<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--<property name="LOG_HOME" value="/home/logs/icp${server.port}" />-->
    <property name="LOG_HOME" value="/home/ap/eccac/logs" />
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>[${PID}][%yellow(%d{yyyy-MM-dd HH:mm:ss.SSS})] [%cyan(%t)] [ %highlight(%-5level)] [%green(%logger{50} %line{15})] : %highlight(%msg) %n</pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="INFO"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/info/icp.%d{yyyy-MM-dd}.%i.info.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxFileSize>10MB</MaxFileSize>
            <totalSizeCap>10MB</totalSizeCap>
            <!--<MaxHistory>100</MaxHistory>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>[%X{traceId}][${PID}]%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<MaxFileSize>10MB</MaxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}/error/icp.%d{yyyy-MM-dd}.%i.error.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxFileSize>30MB</MaxFileSize>
            <totalSizeCap>30MB</totalSizeCap>
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%X{traceId}]%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="com.ecc.access.dao.mapper1" level="DEBUG"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

    <!-- 日志输出级别 -->
    <root level="info">
        <appender-ref ref="INFO" />
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ERROR" />
    </root>
</configuration>
